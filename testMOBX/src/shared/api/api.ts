/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Todo API
 * API for managing todos and todo lists for users.
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
/**
 * Delete nested todos
 */
export type DeleteNestedTodosParameter = boolean;

export type DeleteUsersUserIdTodoListsTodoListIdParams = {
/**
 * Delete nested todos
 */
deleteNestedTodos?: DeleteNestedTodosParameter;
};

/**
 * Include todos in the response
 */
export type IncludeTodosParameter = boolean;

/**
 * Order of items
 */
export type OrderParameter = string;

/**
 * Number of items to take
 */
export type TakeParameter = number;

/**
 * Number of items to skip
 */
export type SkipParameter = number;

export type GetUsersUserIdTodosParams = {
/**
 * Number of items to skip
 */
skip?: SkipParameter;
/**
 * Number of items to take
 */
take?: TakeParameter;
/**
 * Order of items
 */
order?: OrderParameter;
};

export type GetUsersUserIdTodoListsParams = {
/**
 * Number of items to skip
 */
skip?: SkipParameter;
/**
 * Number of items to take
 */
take?: TakeParameter;
/**
 * Order of items
 */
order?: OrderParameter;
/**
 * Include todos in the response
 */
includeTodos?: IncludeTodosParameter;
};

export type GetUsersParams = {
/**
 * Number of items to skip
 */
skip?: SkipParameter;
/**
 * Number of items to take
 */
take?: TakeParameter;
/**
 * Order of items
 */
order?: OrderParameter;
};

export interface RequestBodyTodo {
  /**
   * Todo description
   * @nullable
   */
  description?: string | null;
  /** Todo title */
  title: string;
  /**
   * Todo List id associated with the Todo
   * @nullable
   */
  todoListId?: string | null;
}

export type TodoTodoList = TodoList | null;

export interface Todo {
  /** Whether the todo is completed or not */
  completed: boolean;
  /** User creation date */
  createdAt: string;
  /**
   * Todo description
   * @nullable
   */
  description?: string | null;
  /** Todo ID */
  id: string;
  /** Todo title */
  title: string;
  todoList?: TodoTodoList;
  /**
   * Todo List id associated with the Todo
   * @nullable
   */
  todoListId?: string | null;
  /** User creation date */
  updateAt?: string;
  /** User ID associated with the Todo */
  userId: string;
}

export interface ArrayOfTodos {
  results?: Todo[];
  /** Number of items to skip */
  skip?: number;
  /** Number of items to take */
  take?: number;
  /** Total number of items */
  total?: number;
}

export interface ArrayOfTodoLists {
  results?: TodoList[];
  /** Number of items to skip */
  skip?: number;
  /** Number of items to take */
  take?: number;
  /** Total number of items */
  total?: number;
}

export interface RequestBodyTodoList {
  /** Todo List title */
  title?: string;
}

export interface TodoList {
  /** User creation date */
  createdAt: string;
  /** Todo List ID */
  id: string;
  /** Todo List title */
  title: string;
  todos?: Todo[];
  /** User creation date */
  updateAt?: string;
  /** User ID associated with the Todo List */
  userId: string;
}

export interface ArrayOfUsers {
  results?: User[];
  /** Number of items to skip */
  skip?: number;
  /** Number of items to take */
  take?: number;
  /** Total number of items */
  total?: number;
}

export interface RequestBodyUser {
  /** User email */
  email?: string;
  /** User name */
  name?: string;
}

export interface User {
  /** User creation date */
  createdAt?: string;
  /** User email */
  email?: string;
  /** User ID */
  id?: string;
  /**
   * Microsoft user ID associated with the User
   * @nullable
   */
  microsoftUserId?: string | null;
  /** User name */
  name?: string;
  /** User creation date */
  updateAt?: string;
}





  /**
 * @summary Create a new user
 */
export const postUsers = <TData = AxiosResponse<User>>(
    requestBodyUser: RequestBodyUser, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/users`,
      requestBodyUser,options
    );
  }

/**
 * @summary Retrieve all users
 */
export const getUsers = <TData = AxiosResponse<ArrayOfUsers>>(
    params?: GetUsersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Retrieve a specific user by ID
 */
export const getUsersUserId = <TData = AxiosResponse<User>>(
    userId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}`,options
    );
  }

/**
 * @summary Update a specific user
 */
export const putUsersUserId = <TData = AxiosResponse<User>>(
    userId: string,
    requestBodyUser: RequestBodyUser, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}`,
      requestBodyUser,options
    );
  }

/**
 * @summary Create a new todo list for a user
 */
export const postUsersUserIdTodoLists = <TData = AxiosResponse<TodoList>>(
    userId: string,
    requestBodyTodoList: RequestBodyTodoList, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists`,
      requestBodyTodoList,options
    );
  }

/**
 * @summary Retrieve all todo lists for a user
 */
export const getUsersUserIdTodoLists = <TData = AxiosResponse<ArrayOfTodoLists>>(
    userId: string,
    params?: GetUsersUserIdTodoListsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Retrieve a specific todo list for a user
 */
export const getUsersUserIdTodoListsTodoListId = <TData = AxiosResponse<TodoList>>(
    userId: string,
    todoListId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists/${todoListId}`,options
    );
  }

/**
 * @summary Update a specific todo list for a user
 */
export const putUsersUserIdTodoListsTodoListId = <TData = AxiosResponse<TodoList>>(
    userId: string,
    todoListId: string,
    requestBodyTodoList: RequestBodyTodoList, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists/${todoListId}`,
      requestBodyTodoList,options
    );
  }

/**
 * @summary Delete a specific todo list for a user
 */
export const deleteUsersUserIdTodoListsTodoListId = <TData = AxiosResponse<void>>(
    userId: string,
    todoListId: string,
    params?: DeleteUsersUserIdTodoListsTodoListIdParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists/${todoListId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Create a new todo for a user
 */
export const postUsersUserIdTodos = <TData = AxiosResponse<Todo>>(
    userId: string,
    requestBodyTodo: RequestBodyTodo, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos`,
      requestBodyTodo,options
    );
  }

/**
 * @summary Retrieve all todos for a user
 */
export const getUsersUserIdTodos = <TData = AxiosResponse<ArrayOfTodos>>(
    userId: string,
    params?: GetUsersUserIdTodosParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Retrieve a specific todo for a user
 */
export const getUsersUserIdTodosTodoId = <TData = AxiosResponse<Todo>>(
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}`,options
    );
  }

/**
 * @summary Update a specific todo for a user
 */
export const putUsersUserIdTodosTodoId = <TData = AxiosResponse<Todo>>(
    userId: string,
    todoId: string,
    requestBodyTodo: RequestBodyTodo, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}`,
      requestBodyTodo,options
    );
  }

/**
 * @summary Delete a specific todo for a user
 */
export const deleteUsersUserIdTodosTodoId = <TData = AxiosResponse<void>>(
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}`,options
    );
  }

/**
 * @summary Mark a todo as completed
 */
export const patchUsersUserIdTodosTodoIdComplete = <TData = AxiosResponse<Todo>>(
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}/complete`,undefined,options
    );
  }

/**
 * @summary Mark a todo as uncompleted
 */
export const patchUsersUserIdTodosTodoIdUncomplete = <TData = AxiosResponse<Todo>>(
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}/uncomplete`,undefined,options
    );
  }

/**
 * @summary Toggle a todo
 */
export const patchUsersUserIdTodosTodoIdToggle = <TData = AxiosResponse<Todo>>(
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}/toggle`,undefined,options
    );
  }

/**
 * @summary Sync todos with third-party service for a user
 */
export const postUsersUserIdTodosSync = <TData = AxiosResponse<ArrayOfTodos>>(
    userId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/sync`,undefined,options
    );
  }

/**
 * @summary Webhook endpoint for third-party service updates
 */
export const postWebhooksTodoUpdates = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/webhooks/todoUpdates`,undefined,options
    );
  }

export type PostUsersResult = AxiosResponse<User>
export type GetUsersResult = AxiosResponse<ArrayOfUsers>
export type GetUsersUserIdResult = AxiosResponse<User>
export type PutUsersUserIdResult = AxiosResponse<User>
export type PostUsersUserIdTodoListsResult = AxiosResponse<TodoList>
export type GetUsersUserIdTodoListsResult = AxiosResponse<ArrayOfTodoLists>
export type GetUsersUserIdTodoListsTodoListIdResult = AxiosResponse<TodoList>
export type PutUsersUserIdTodoListsTodoListIdResult = AxiosResponse<TodoList>
export type DeleteUsersUserIdTodoListsTodoListIdResult = AxiosResponse<void>
export type PostUsersUserIdTodosResult = AxiosResponse<Todo>
export type GetUsersUserIdTodosResult = AxiosResponse<ArrayOfTodos>
export type GetUsersUserIdTodosTodoIdResult = AxiosResponse<Todo>
export type PutUsersUserIdTodosTodoIdResult = AxiosResponse<Todo>
export type DeleteUsersUserIdTodosTodoIdResult = AxiosResponse<void>
export type PatchUsersUserIdTodosTodoIdCompleteResult = AxiosResponse<Todo>
export type PatchUsersUserIdTodosTodoIdUncompleteResult = AxiosResponse<Todo>
export type PatchUsersUserIdTodosTodoIdToggleResult = AxiosResponse<Todo>
export type PostUsersUserIdTodosSyncResult = AxiosResponse<ArrayOfTodos>
export type PostWebhooksTodoUpdatesResult = AxiosResponse<void>
