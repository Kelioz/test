/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Todo API
 * API for managing todos and todo lists for users.
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
/**
 * Delete nested todos
 */
export type DeleteNestedTodosParameter = boolean;

export type DeleteUsersUserIdTodoListsTodoListIdParams = {
/**
 * Delete nested todos
 */
deleteNestedTodos?: DeleteNestedTodosParameter;
};

/**
 * Include todos in the response
 */
export type IncludeTodosParameter = boolean;

/**
 * Order of items
 */
export type OrderParameter = string;

/**
 * Number of items to take
 */
export type TakeParameter = number;

/**
 * Number of items to skip
 */
export type SkipParameter = number;

export type GetUsersUserIdTodosParams = {
/**
 * Number of items to skip
 */
skip?: SkipParameter;
/**
 * Number of items to take
 */
take?: TakeParameter;
/**
 * Order of items
 */
order?: OrderParameter;
};

export type GetUsersUserIdTodoListsParams = {
/**
 * Number of items to skip
 */
skip?: SkipParameter;
/**
 * Number of items to take
 */
take?: TakeParameter;
/**
 * Order of items
 */
order?: OrderParameter;
/**
 * Include todos in the response
 */
includeTodos?: IncludeTodosParameter;
};

export type GetUsersParams = {
/**
 * Number of items to skip
 */
skip?: SkipParameter;
/**
 * Number of items to take
 */
take?: TakeParameter;
/**
 * Order of items
 */
order?: OrderParameter;
};

export interface RequestBodyTodo {
  /**
   * Todo description
   * @nullable
   */
  description?: string | null;
  /** Todo title */
  title: string;
  /**
   * Todo List id associated with the Todo
   * @nullable
   */
  todoListId?: string | null;
}

export type TodoTodoList = TodoList | null;

export interface Todo {
  /** Whether the todo is completed or not */
  completed: boolean;
  /** User creation date */
  createdAt: string;
  /**
   * Todo description
   * @nullable
   */
  description?: string | null;
  /** Todo ID */
  id: string;
  /** Todo title */
  title: string;
  todoList?: TodoTodoList;
  /**
   * Todo List id associated with the Todo
   * @nullable
   */
  todoListId?: string | null;
  /** User creation date */
  updateAt?: string;
  /** User ID associated with the Todo */
  userId: string;
}

export interface ArrayOfTodos {
  results?: Todo[];
  /** Number of items to skip */
  skip?: number;
  /** Number of items to take */
  take?: number;
  /** Total number of items */
  total?: number;
}

export interface ArrayOfTodoLists {
  results?: TodoList[];
  /** Number of items to skip */
  skip?: number;
  /** Number of items to take */
  take?: number;
  /** Total number of items */
  total?: number;
}

export interface RequestBodyTodoList {
  /** Todo List title */
  title?: string;
}

export interface TodoList {
  /** User creation date */
  createdAt: string;
  /** Todo List ID */
  id: string;
  /** Todo List title */
  title: string;
  todos?: Todo[];
  /** User creation date */
  updateAt?: string;
  /** User ID associated with the Todo List */
  userId: string;
}

export interface ArrayOfUsers {
  results?: User[];
  /** Number of items to skip */
  skip?: number;
  /** Number of items to take */
  take?: number;
  /** Total number of items */
  total?: number;
}

export interface RequestBodyUser {
  /** User email */
  email?: string;
  /** User name */
  name?: string;
}

export interface User {
  /** User creation date */
  createdAt?: string;
  /** User email */
  email?: string;
  /** User ID */
  id?: string;
  /**
   * Microsoft user ID associated with the User
   * @nullable
   */
  microsoftUserId?: string | null;
  /** User name */
  name?: string;
  /** User creation date */
  updateAt?: string;
}





/**
 * @summary Create a new user
 */
export const postUsers = (
    requestBodyUser: RequestBodyUser, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/users`,
      requestBodyUser,options
    );
  }



export const getPostUsersMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: RequestBodyUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: RequestBodyUser}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsers>>, {data: RequestBodyUser}> = (props) => {
          const {data} = props ?? {};

          return  postUsers(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
    export type PostUsersMutationBody = RequestBodyUser
    export type PostUsersMutationError = AxiosError<unknown>

    /**
 * @summary Create a new user
 */
export const usePostUsers = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: RequestBodyUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postUsers>>,
        TError,
        {data: RequestBodyUser},
        TContext
      > => {

      const mutationOptions = getPostUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all users
 */
export const getUsers = (
    params?: GetUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfUsers>> => {
    
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersQueryKey = (params?: GetUsersParams,) => {
    return [`https://learnapi.testspace.ybru.ru/api/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUsers>>, TError = AxiosError<unknown>>(params?: GetUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = AxiosError<unknown>


/**
 * @summary Retrieve all users
 */

export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = AxiosError<unknown>>(
 params?: GetUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a specific user by ID
 */
export const getUsersUserId = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}`,options
    );
  }


export const getGetUsersUserIdQueryKey = (userId: string,) => {
    return [`https://learnapi.testspace.ybru.ru/api/users/${userId}`] as const;
    }

    
export const getGetUsersUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = AxiosError<unknown>>(userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserId>>> = ({ signal }) => getUsersUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUserId>>>
export type GetUsersUserIdQueryError = AxiosError<unknown>


/**
 * @summary Retrieve a specific user by ID
 */

export function useGetUsersUserId<TData = Awaited<ReturnType<typeof getUsersUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a specific user
 */
export const putUsersUserId = (
    userId: string,
    requestBodyUser: RequestBodyUser, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.default.put(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}`,
      requestBodyUser,options
    );
  }



export const getPutUsersUserIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserId>>, TError,{userId: string;data: RequestBodyUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putUsersUserId>>, TError,{userId: string;data: RequestBodyUser}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsersUserId>>, {userId: string;data: RequestBodyUser}> = (props) => {
          const {userId,data} = props ?? {};

          return  putUsersUserId(userId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUsersUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof putUsersUserId>>>
    export type PutUsersUserIdMutationBody = RequestBodyUser
    export type PutUsersUserIdMutationError = AxiosError<unknown>

    /**
 * @summary Update a specific user
 */
export const usePutUsersUserId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserId>>, TError,{userId: string;data: RequestBodyUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putUsersUserId>>,
        TError,
        {userId: string;data: RequestBodyUser},
        TContext
      > => {

      const mutationOptions = getPutUsersUserIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a new todo list for a user
 */
export const postUsersUserIdTodoLists = (
    userId: string,
    requestBodyTodoList: RequestBodyTodoList, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TodoList>> => {
    
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists`,
      requestBodyTodoList,options
    );
  }



export const getPostUsersUserIdTodoListsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersUserIdTodoLists>>, TError,{userId: string;data: RequestBodyTodoList}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsersUserIdTodoLists>>, TError,{userId: string;data: RequestBodyTodoList}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersUserIdTodoLists>>, {userId: string;data: RequestBodyTodoList}> = (props) => {
          const {userId,data} = props ?? {};

          return  postUsersUserIdTodoLists(userId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersUserIdTodoListsMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersUserIdTodoLists>>>
    export type PostUsersUserIdTodoListsMutationBody = RequestBodyTodoList
    export type PostUsersUserIdTodoListsMutationError = AxiosError<unknown>

    /**
 * @summary Create a new todo list for a user
 */
export const usePostUsersUserIdTodoLists = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersUserIdTodoLists>>, TError,{userId: string;data: RequestBodyTodoList}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postUsersUserIdTodoLists>>,
        TError,
        {userId: string;data: RequestBodyTodoList},
        TContext
      > => {

      const mutationOptions = getPostUsersUserIdTodoListsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all todo lists for a user
 */
export const getUsersUserIdTodoLists = (
    userId: string,
    params?: GetUsersUserIdTodoListsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfTodoLists>> => {
    
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersUserIdTodoListsQueryKey = (userId: string,
    params?: GetUsersUserIdTodoListsParams,) => {
    return [`https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUsersUserIdTodoListsQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUserIdTodoLists>>, TError = AxiosError<unknown>>(userId: string,
    params?: GetUsersUserIdTodoListsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodoLists>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUserIdTodoListsQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserIdTodoLists>>> = ({ signal }) => getUsersUserIdTodoLists(userId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodoLists>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersUserIdTodoListsQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUserIdTodoLists>>>
export type GetUsersUserIdTodoListsQueryError = AxiosError<unknown>


/**
 * @summary Retrieve all todo lists for a user
 */

export function useGetUsersUserIdTodoLists<TData = Awaited<ReturnType<typeof getUsersUserIdTodoLists>>, TError = AxiosError<unknown>>(
 userId: string,
    params?: GetUsersUserIdTodoListsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodoLists>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersUserIdTodoListsQueryOptions(userId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a specific todo list for a user
 */
export const getUsersUserIdTodoListsTodoListId = (
    userId: string,
    todoListId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TodoList>> => {
    
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists/${todoListId}`,options
    );
  }


export const getGetUsersUserIdTodoListsTodoListIdQueryKey = (userId: string,
    todoListId: string,) => {
    return [`https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists/${todoListId}`] as const;
    }

    
export const getGetUsersUserIdTodoListsTodoListIdQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUserIdTodoListsTodoListId>>, TError = AxiosError<unknown>>(userId: string,
    todoListId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodoListsTodoListId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUserIdTodoListsTodoListIdQueryKey(userId,todoListId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserIdTodoListsTodoListId>>> = ({ signal }) => getUsersUserIdTodoListsTodoListId(userId,todoListId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId && todoListId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodoListsTodoListId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersUserIdTodoListsTodoListIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUserIdTodoListsTodoListId>>>
export type GetUsersUserIdTodoListsTodoListIdQueryError = AxiosError<unknown>


/**
 * @summary Retrieve a specific todo list for a user
 */

export function useGetUsersUserIdTodoListsTodoListId<TData = Awaited<ReturnType<typeof getUsersUserIdTodoListsTodoListId>>, TError = AxiosError<unknown>>(
 userId: string,
    todoListId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodoListsTodoListId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersUserIdTodoListsTodoListIdQueryOptions(userId,todoListId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a specific todo list for a user
 */
export const putUsersUserIdTodoListsTodoListId = (
    userId: string,
    todoListId: string,
    requestBodyTodoList: RequestBodyTodoList, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TodoList>> => {
    
    return axios.default.put(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists/${todoListId}`,
      requestBodyTodoList,options
    );
  }



export const getPutUsersUserIdTodoListsTodoListIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserIdTodoListsTodoListId>>, TError,{userId: string;todoListId: string;data: RequestBodyTodoList}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putUsersUserIdTodoListsTodoListId>>, TError,{userId: string;todoListId: string;data: RequestBodyTodoList}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsersUserIdTodoListsTodoListId>>, {userId: string;todoListId: string;data: RequestBodyTodoList}> = (props) => {
          const {userId,todoListId,data} = props ?? {};

          return  putUsersUserIdTodoListsTodoListId(userId,todoListId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUsersUserIdTodoListsTodoListIdMutationResult = NonNullable<Awaited<ReturnType<typeof putUsersUserIdTodoListsTodoListId>>>
    export type PutUsersUserIdTodoListsTodoListIdMutationBody = RequestBodyTodoList
    export type PutUsersUserIdTodoListsTodoListIdMutationError = AxiosError<unknown>

    /**
 * @summary Update a specific todo list for a user
 */
export const usePutUsersUserIdTodoListsTodoListId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserIdTodoListsTodoListId>>, TError,{userId: string;todoListId: string;data: RequestBodyTodoList}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putUsersUserIdTodoListsTodoListId>>,
        TError,
        {userId: string;todoListId: string;data: RequestBodyTodoList},
        TContext
      > => {

      const mutationOptions = getPutUsersUserIdTodoListsTodoListIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a specific todo list for a user
 */
export const deleteUsersUserIdTodoListsTodoListId = (
    userId: string,
    todoListId: string,
    params?: DeleteUsersUserIdTodoListsTodoListIdParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todoLists/${todoListId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getDeleteUsersUserIdTodoListsTodoListIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserIdTodoListsTodoListId>>, TError,{userId: string;todoListId: string;params?: DeleteUsersUserIdTodoListsTodoListIdParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserIdTodoListsTodoListId>>, TError,{userId: string;todoListId: string;params?: DeleteUsersUserIdTodoListsTodoListIdParams}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUsersUserIdTodoListsTodoListId>>, {userId: string;todoListId: string;params?: DeleteUsersUserIdTodoListsTodoListIdParams}> = (props) => {
          const {userId,todoListId,params} = props ?? {};

          return  deleteUsersUserIdTodoListsTodoListId(userId,todoListId,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUsersUserIdTodoListsTodoListIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsersUserIdTodoListsTodoListId>>>
    
    export type DeleteUsersUserIdTodoListsTodoListIdMutationError = AxiosError<unknown>

    /**
 * @summary Delete a specific todo list for a user
 */
export const useDeleteUsersUserIdTodoListsTodoListId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserIdTodoListsTodoListId>>, TError,{userId: string;todoListId: string;params?: DeleteUsersUserIdTodoListsTodoListIdParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUsersUserIdTodoListsTodoListId>>,
        TError,
        {userId: string;todoListId: string;params?: DeleteUsersUserIdTodoListsTodoListIdParams},
        TContext
      > => {

      const mutationOptions = getDeleteUsersUserIdTodoListsTodoListIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a new todo for a user
 */
export const postUsersUserIdTodos = (
    userId: string,
    requestBodyTodo: RequestBodyTodo, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos`,
      requestBodyTodo,options
    );
  }



export const getPostUsersUserIdTodosMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersUserIdTodos>>, TError,{userId: string;data: RequestBodyTodo}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsersUserIdTodos>>, TError,{userId: string;data: RequestBodyTodo}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersUserIdTodos>>, {userId: string;data: RequestBodyTodo}> = (props) => {
          const {userId,data} = props ?? {};

          return  postUsersUserIdTodos(userId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersUserIdTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersUserIdTodos>>>
    export type PostUsersUserIdTodosMutationBody = RequestBodyTodo
    export type PostUsersUserIdTodosMutationError = AxiosError<unknown>

    /**
 * @summary Create a new todo for a user
 */
export const usePostUsersUserIdTodos = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersUserIdTodos>>, TError,{userId: string;data: RequestBodyTodo}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postUsersUserIdTodos>>,
        TError,
        {userId: string;data: RequestBodyTodo},
        TContext
      > => {

      const mutationOptions = getPostUsersUserIdTodosMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Retrieve all todos for a user
 */
export const getUsersUserIdTodos = (
    userId: string,
    params?: GetUsersUserIdTodosParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfTodos>> => {
    
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersUserIdTodosQueryKey = (userId: string,
    params?: GetUsersUserIdTodosParams,) => {
    return [`https://learnapi.testspace.ybru.ru/api/users/${userId}/todos`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUsersUserIdTodosQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUserIdTodos>>, TError = AxiosError<unknown>>(userId: string,
    params?: GetUsersUserIdTodosParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodos>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUserIdTodosQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserIdTodos>>> = ({ signal }) => getUsersUserIdTodos(userId,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodos>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersUserIdTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUserIdTodos>>>
export type GetUsersUserIdTodosQueryError = AxiosError<unknown>


/**
 * @summary Retrieve all todos for a user
 */

export function useGetUsersUserIdTodos<TData = Awaited<ReturnType<typeof getUsersUserIdTodos>>, TError = AxiosError<unknown>>(
 userId: string,
    params?: GetUsersUserIdTodosParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodos>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersUserIdTodosQueryOptions(userId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Retrieve a specific todo for a user
 */
export const getUsersUserIdTodosTodoId = (
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.get(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}`,options
    );
  }


export const getGetUsersUserIdTodosTodoIdQueryKey = (userId: string,
    todoId: string,) => {
    return [`https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}`] as const;
    }

    
export const getGetUsersUserIdTodosTodoIdQueryOptions = <TData = Awaited<ReturnType<typeof getUsersUserIdTodosTodoId>>, TError = AxiosError<unknown>>(userId: string,
    todoId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodosTodoId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersUserIdTodosTodoIdQueryKey(userId,todoId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersUserIdTodosTodoId>>> = ({ signal }) => getUsersUserIdTodosTodoId(userId,todoId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId && todoId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodosTodoId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUsersUserIdTodosTodoIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersUserIdTodosTodoId>>>
export type GetUsersUserIdTodosTodoIdQueryError = AxiosError<unknown>


/**
 * @summary Retrieve a specific todo for a user
 */

export function useGetUsersUserIdTodosTodoId<TData = Awaited<ReturnType<typeof getUsersUserIdTodosTodoId>>, TError = AxiosError<unknown>>(
 userId: string,
    todoId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersUserIdTodosTodoId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUsersUserIdTodosTodoIdQueryOptions(userId,todoId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update a specific todo for a user
 */
export const putUsersUserIdTodosTodoId = (
    userId: string,
    todoId: string,
    requestBodyTodo: RequestBodyTodo, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.put(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}`,
      requestBodyTodo,options
    );
  }



export const getPutUsersUserIdTodosTodoIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserIdTodosTodoId>>, TError,{userId: string;todoId: string;data: RequestBodyTodo}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putUsersUserIdTodosTodoId>>, TError,{userId: string;todoId: string;data: RequestBodyTodo}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsersUserIdTodosTodoId>>, {userId: string;todoId: string;data: RequestBodyTodo}> = (props) => {
          const {userId,todoId,data} = props ?? {};

          return  putUsersUserIdTodosTodoId(userId,todoId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUsersUserIdTodosTodoIdMutationResult = NonNullable<Awaited<ReturnType<typeof putUsersUserIdTodosTodoId>>>
    export type PutUsersUserIdTodosTodoIdMutationBody = RequestBodyTodo
    export type PutUsersUserIdTodosTodoIdMutationError = AxiosError<unknown>

    /**
 * @summary Update a specific todo for a user
 */
export const usePutUsersUserIdTodosTodoId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersUserIdTodosTodoId>>, TError,{userId: string;todoId: string;data: RequestBodyTodo}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putUsersUserIdTodosTodoId>>,
        TError,
        {userId: string;todoId: string;data: RequestBodyTodo},
        TContext
      > => {

      const mutationOptions = getPutUsersUserIdTodosTodoIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a specific todo for a user
 */
export const deleteUsersUserIdTodosTodoId = (
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}`,options
    );
  }



export const getDeleteUsersUserIdTodosTodoIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserIdTodosTodoId>>, TError,{userId: string;todoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserIdTodosTodoId>>, TError,{userId: string;todoId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUsersUserIdTodosTodoId>>, {userId: string;todoId: string}> = (props) => {
          const {userId,todoId} = props ?? {};

          return  deleteUsersUserIdTodosTodoId(userId,todoId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUsersUserIdTodosTodoIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsersUserIdTodosTodoId>>>
    
    export type DeleteUsersUserIdTodosTodoIdMutationError = AxiosError<unknown>

    /**
 * @summary Delete a specific todo for a user
 */
export const useDeleteUsersUserIdTodosTodoId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersUserIdTodosTodoId>>, TError,{userId: string;todoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUsersUserIdTodosTodoId>>,
        TError,
        {userId: string;todoId: string},
        TContext
      > => {

      const mutationOptions = getDeleteUsersUserIdTodosTodoIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Mark a todo as completed
 */
export const patchUsersUserIdTodosTodoIdComplete = (
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.patch(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}/complete`,undefined,options
    );
  }



export const getPatchUsersUserIdTodosTodoIdCompleteMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdComplete>>, TError,{userId: string;todoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdComplete>>, TError,{userId: string;todoId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdComplete>>, {userId: string;todoId: string}> = (props) => {
          const {userId,todoId} = props ?? {};

          return  patchUsersUserIdTodosTodoIdComplete(userId,todoId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchUsersUserIdTodosTodoIdCompleteMutationResult = NonNullable<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdComplete>>>
    
    export type PatchUsersUserIdTodosTodoIdCompleteMutationError = AxiosError<unknown>

    /**
 * @summary Mark a todo as completed
 */
export const usePatchUsersUserIdTodosTodoIdComplete = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdComplete>>, TError,{userId: string;todoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdComplete>>,
        TError,
        {userId: string;todoId: string},
        TContext
      > => {

      const mutationOptions = getPatchUsersUserIdTodosTodoIdCompleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Mark a todo as uncompleted
 */
export const patchUsersUserIdTodosTodoIdUncomplete = (
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.patch(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}/uncomplete`,undefined,options
    );
  }



export const getPatchUsersUserIdTodosTodoIdUncompleteMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdUncomplete>>, TError,{userId: string;todoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdUncomplete>>, TError,{userId: string;todoId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdUncomplete>>, {userId: string;todoId: string}> = (props) => {
          const {userId,todoId} = props ?? {};

          return  patchUsersUserIdTodosTodoIdUncomplete(userId,todoId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchUsersUserIdTodosTodoIdUncompleteMutationResult = NonNullable<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdUncomplete>>>
    
    export type PatchUsersUserIdTodosTodoIdUncompleteMutationError = AxiosError<unknown>

    /**
 * @summary Mark a todo as uncompleted
 */
export const usePatchUsersUserIdTodosTodoIdUncomplete = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdUncomplete>>, TError,{userId: string;todoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdUncomplete>>,
        TError,
        {userId: string;todoId: string},
        TContext
      > => {

      const mutationOptions = getPatchUsersUserIdTodosTodoIdUncompleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Toggle a todo
 */
export const patchUsersUserIdTodosTodoIdToggle = (
    userId: string,
    todoId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.patch(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/${todoId}/toggle`,undefined,options
    );
  }



export const getPatchUsersUserIdTodosTodoIdToggleMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdToggle>>, TError,{userId: string;todoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdToggle>>, TError,{userId: string;todoId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdToggle>>, {userId: string;todoId: string}> = (props) => {
          const {userId,todoId} = props ?? {};

          return  patchUsersUserIdTodosTodoIdToggle(userId,todoId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchUsersUserIdTodosTodoIdToggleMutationResult = NonNullable<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdToggle>>>
    
    export type PatchUsersUserIdTodosTodoIdToggleMutationError = AxiosError<unknown>

    /**
 * @summary Toggle a todo
 */
export const usePatchUsersUserIdTodosTodoIdToggle = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdToggle>>, TError,{userId: string;todoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchUsersUserIdTodosTodoIdToggle>>,
        TError,
        {userId: string;todoId: string},
        TContext
      > => {

      const mutationOptions = getPatchUsersUserIdTodosTodoIdToggleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Sync todos with third-party service for a user
 */
export const postUsersUserIdTodosSync = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfTodos>> => {
    
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/users/${userId}/todos/sync`,undefined,options
    );
  }



export const getPostUsersUserIdTodosSyncMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersUserIdTodosSync>>, TError,{userId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsersUserIdTodosSync>>, TError,{userId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersUserIdTodosSync>>, {userId: string}> = (props) => {
          const {userId} = props ?? {};

          return  postUsersUserIdTodosSync(userId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersUserIdTodosSyncMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersUserIdTodosSync>>>
    
    export type PostUsersUserIdTodosSyncMutationError = AxiosError<unknown>

    /**
 * @summary Sync todos with third-party service for a user
 */
export const usePostUsersUserIdTodosSync = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersUserIdTodosSync>>, TError,{userId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postUsersUserIdTodosSync>>,
        TError,
        {userId: string},
        TContext
      > => {

      const mutationOptions = getPostUsersUserIdTodosSyncMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Webhook endpoint for third-party service updates
 */
export const postWebhooksTodoUpdates = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `https://learnapi.testspace.ybru.ru/api/webhooks/todoUpdates`,undefined,options
    );
  }



export const getPostWebhooksTodoUpdatesMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebhooksTodoUpdates>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postWebhooksTodoUpdates>>, TError,void, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWebhooksTodoUpdates>>, void> = () => {
          

          return  postWebhooksTodoUpdates(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWebhooksTodoUpdatesMutationResult = NonNullable<Awaited<ReturnType<typeof postWebhooksTodoUpdates>>>
    
    export type PostWebhooksTodoUpdatesMutationError = AxiosError<unknown>

    /**
 * @summary Webhook endpoint for third-party service updates
 */
export const usePostWebhooksTodoUpdates = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWebhooksTodoUpdates>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postWebhooksTodoUpdates>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostWebhooksTodoUpdatesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
